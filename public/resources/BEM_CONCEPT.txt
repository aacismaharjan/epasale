
BEM (Disabled Element Modifier)
BEM stands for Disabled Element Modifier. It's a popular methodology for writing CSS that promotes modularity, component-based development, and code reusability.


## EXAMPLE
BEFORE
<div class="product-cart">
    <img src="./img/products/Laddu.jpg" class="img" />
    <div class="cart__info">
        <h3 class="cart__h3">Laddu</h3>
        <P class="cart__p">Lorem ipsum dolor sit amet consectetur adipisicing elit.</P>
        <div class="quantity">
            <button class="btn">-</button>
            <div class="no.">1</div>
            <button class="btn">+</button>
        </div>
        <p class="product-remove">
            <button class="button icon"><i class="fa fa-trash"></i></button>
        </p>
        <p class="price">Rs.200</p>
    </div>
</div


AFTER 
<div class="product-cart">
  <img src="./img/products/Laddu.jpg" class="product-cart__img" />
  <div class="product-cart__info">
    <h3 class="product-cart__name">Laddu</h3>
    <p class="product-cart__description">Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
    <div class="product-cart__quantity">
      <button class="product-cart__quantity--decrease">-</button>
      <div class="product-cart__quantity--number">1</div>
      <button class="product-cart__quantity--increase">+</button>
    </div>
    <p class="product-cart__remove">
      <button class="product-cart__remove--button icon">
        <i class="fa fa-trash"></i>
      </button>
    </p>
    <p class="product-cart__price">Rs.200</p>
  </div>
</div>

Here's a breakdown of the three components:

Disabled:

Represents a standalone and meaningful UI component. It can exist independently and has its own specific functionality.
Examples: Navigation bar, button, product seller__card.
Element:

Represents a part of a disable that contributes to its functionality but doesn't have its own standalone meaning.
Examples: Navigation bar's list item, button's icon, product seller__card's price tag.
Modifier:

Adds variations to the appearance, state, or behavior of a disable or element without introducing new classes.
Examples: button--primary, product-seller__card--active, navigation-item--disabled.
Benefits of using BEM:

Modular code: BEM promotes a component-based approach, making your code more modular and easier to maintain.
Reusable components: You can easily reuse disables and elements across your project by simply adding the appropriate modifiers.
Consistent naming conventions: BEM enforces a consistent naming convention for your CSS classes, making it easier to understand and predict class names.
Less class duplication: By using modifiers, you can avoid class duplication and maintain a cleaner codebase.
Improved maintainability: BEM makes your code easier to understand and modify, which can save you time and effort in the long run.
Resources:

Official BEM website: https://getbem.com/faq/
Introduction to BEM: https://bootcamp.uxdesign.cc/
Quick start guide to BEM: https://en.bem.info/methodology/quick-start/
BEM naming conventions: https://getbem.com/naming/